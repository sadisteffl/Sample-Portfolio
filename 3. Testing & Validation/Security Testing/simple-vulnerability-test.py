#!/usr/bin/env python3
"""
Simple Python file with intentional vulnerabilities for security testing.
This file will be used to test if our GitHub Actions security workflows work properly.
"""

import os
import subprocess
import sqlite3
from flask import Flask, request

# Intentional SQL injection vulnerability
def get_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # VULNERABLE: SQL injection via string concatenation
    query = "SELECT * FROM users WHERE id = " + user_id
    cursor.execute(query)

    return cursor.fetchall()

# Intentional command injection vulnerability
def ping_host(hostname):
    # VULNERABLE: Command injection via subprocess
    command = "ping -c 4 " + hostname
    return os.system(command)

# Intentional hardcoded credentials
AWS_ACCESS_KEY = "AKIAIOSFODNN7EXAMPLE"
AWS_SECRET_KEY = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
DB_PASSWORD = "admin123"

# Intentional weak cryptographic hash
def hash_password(password):
    import hashlib
    # VULNERABLE: Using MD5 for password hashing
    return hashlib.md5(password.encode()).hexdigest()

# Flask app with XSS vulnerability
app = Flask(__name__)

@app.route('/comment')
def comment():
    user_input = request.args.get('comment', '')

    # VULNERABLE: XSS via direct rendering of user input
    return f"<h1>User said: {user_input}</h1>"

if __name__ == "__main__":
    # Test the vulnerable functions
    get_user("1 OR 1=1")
    ping_host("localhost; rm -rf /")
    print(hash_password("password"))

    app.run(debug=True, host='0.0.0.0', port=5000)